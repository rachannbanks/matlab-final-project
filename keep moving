function KeepMoving(snake, dot, boardsz, currentxvel, currentyvel)
%this function gets called if no key is pressed to keep the snake moving
%essentially the same thing as ChangeVelocity
currentX=snake.XData;
currentY=snake.YData;
newX=[ currentX(1) currentX]; %array of current x values
newY=[ currentY(1) currentY]; %array of current y values
snakelength=size(snake.XData);
nlinks=snakelength(2); %length of snake
%round dot position to whole numbers
dotx=dot.XData;
doty=dot.YData;
roundX=round(dotx);
roundY=round(doty);
%set up eat variable
eat=0;
%new velocity is the same as current velocity
newxvelocity=currentxvel;
newyvelocity=currentyvel;
plotsnake();
    function plotsnake()
        %add new first position and move up position of all other links
        newX(1)=currentX(1) + newxvelocity;
        newY(1)=currentY(1) + newyvelocity;
        CollisionCheck();
    end
    function CollisionCheck()
        %check if snake hit the walls
        if any(snake.XData == -6) || any(snake.XData == 6)
            disp('end game');
            return;
        elseif any(snake.YData == -6) || any(snake.YData == 6)
            disp('end game');
            return;
        end
        %check if eat dot
        %need to check if any link eats the dot
        eat=1; 
        %if eat is changed the snake ate a dot
        for i=1:nlinks
            if currentX(i) < dotx && newX(i) > dotx
                if currentY(i) == roundY
                    disp('eat');
                    eat= 2;
                    UpdateDot();
                    break;
                end
            
            elseif currentX(i) > dotx && newX(i) < dotx
                if currentY(i) == roundY
                    disp('eat');
                    eat=2;
                    UpdateDot();                  
                    break;
                end
            
            elseif currentY(i) < doty && newY(i) > doty
                if currentX(i) == roundX
                    disp('eat');
                    eat=2;
                    UpdateDot();
                    break;
                end
            
            elseif currentY(i) > doty && newY(i) < doty
                if currentX(i) == roundX
                    disp('eat');
                    eat=2;
                    UpdateDot();
                    break;
                end
                
            end
        end
        %if eat variable is unchanged shorten the snake and plot it
        if eat == 1
            %make position arrays the same length as the number of links
            newX=newX(1:nlinks);
            newY=newY(1:nlinks);
            snake.XData=newX;
            snake.YData=newY;
        end

    
        %if it doesn't eat dot then it gets here 
        %make position arrays one shorter
%         newX=newX(1:end-1);
%         newY=newY(1:end-1);
        %update these to snake position
        %snake.XData=newX;
        %snake.YData=newY;
    end
    function UpdateDot()
        dot.XData= (boardsz-1)*2*rand()-(boardsz-1);
        dot.YData= (boardsz-1)*2*rand()-(boardsz-1);
        LengthenSnake();
    end
    function LengthenSnake()
        %add a link to the snake
        %keep position arrays one longer, make these snake data
        snake.XData=newX;
        snake.YData=newY;
        return;
    end
end
